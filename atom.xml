<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只小仙女</title>
  
  <subtitle>I do as I can.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-06-22T18:47:48.027Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Catherine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Commandments</title>
    <link href="http://yoursite.com/2022/06/23/Commandments/"/>
    <id>http://yoursite.com/2022/06/23/Commandments/</id>
    <published>2022-06-22T18:30:13.000Z</published>
    <updated>2022-06-22T18:47:48.027Z</updated>
    
    <content type="html"><![CDATA[<p><em><font color="＃00DDDD">不乱于心，不困于情，不畏将来，不念过往，如此，安好。</font></em></p><p>好好学习，安排计划</p><p>不找小哥哥</p><p>不煲剧不打游戏</p><p>过教资</p><p>过雅托</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;&lt;font color=&quot;＃00DDDD&quot;&gt;不乱于心，不困于情，不畏将来，不念过往，如此，安好。&lt;/font&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;好好学习，安排计划&lt;/p&gt;
&lt;p&gt;不找小哥哥&lt;/p&gt;
&lt;p&gt;不煲剧不打游戏&lt;/p&gt;
&lt;p&gt;过教资&lt;/p&gt;
&lt;p&gt;过雅托&lt;/p&gt;

      
    
    </summary>
    
      <category term="casually" scheme="http://yoursite.com/categories/casually/"/>
    
    
      <category term="casually" scheme="http://yoursite.com/tags/casually/"/>
    
  </entry>
  
  <entry>
    <title>Record and Say ‘GOOD BYE’</title>
    <link href="http://yoursite.com/2022/06/23/Record-and-Say-%E2%80%98GOOD-BYE%E2%80%99/"/>
    <id>http://yoursite.com/2022/06/23/Record-and-Say-‘GOOD-BYE’/</id>
    <published>2022-06-22T17:54:21.000Z</published>
    <updated>2022-06-22T18:28:44.978Z</updated>
    
    <content type="html"><![CDATA[<p>It’s the last time I retrospect the past years.</p><p>Just after I have graduated, I have the chance to apply to ITP and I could get it(if I wanted). But I miss the chance. Maybe, I will never go there.</p><p>Before 5 years ago, I wascowardice and cared about many things unworthy. Perhaps, it was my destiny to suffer such bad things.</p><p>Can I blame others make me a loser ? But I can not. I know, everthing is my choice.</p><p>I can not accept my failure about those years. I am the person who can not accept the gaps of my life.</p><p>I still want to say, why is me ? what I did wrong ? who will pay my lost years——the most preciour years for a physicsor.</p><p>When I face to the options, I know others are all easy and operable. But I chose the most hardness one, and I must overcome every difficulties only by myself.</p><p>After I know that not only me give up many things, I could feel relived with those abandoned options.</p><p>But, I do not know when I can let things go about my years. May be I become a doctor or a junior elite or I can join in ITP ?</p><p>Anyway, I can not control the past, and I only can look forward. Thus, I could never addicted to the past. I will and must try my best for the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s the last time I retrospect the past years.&lt;/p&gt;
&lt;p&gt;Just after I have graduated, I have the chance to apply to ITP and I could get it(
      
    
    </summary>
    
      <category term="casually" scheme="http://yoursite.com/categories/casually/"/>
    
    
      <category term="emo" scheme="http://yoursite.com/tags/emo/"/>
    
  </entry>
  
  <entry>
    <title>一只小仙女</title>
    <link href="http://yoursite.com/2022/06/03/%E4%B8%80%E5%8F%AA%E5%B0%8F%E4%BB%99%E5%A5%B3/"/>
    <id>http://yoursite.com/2022/06/03/一只小仙女/</id>
    <published>2022-06-03T06:12:06.000Z</published>
    <updated>2022-06-03T06:15:19.475Z</updated>
    
    <content type="html"><![CDATA[<p>Hello！这里是一只小仙女！</p><p>终于复活了我的blog</p><p>鬼知道什么时候会写点什么</p><p>以后就是个科研狗啦！o(<em>￣▽￣</em>)ブ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello！这里是一只小仙女！&lt;/p&gt;
&lt;p&gt;终于复活了我的blog&lt;/p&gt;
&lt;p&gt;鬼知道什么时候会写点什么&lt;/p&gt;
&lt;p&gt;以后就是个科研狗啦！o(&lt;em&gt;￣▽￣&lt;/em&gt;)ブ&lt;/p&gt;

      
    
    </summary>
    
      <category term="casually" scheme="http://yoursite.com/categories/casually/"/>
    
    
      <category term="casually" scheme="http://yoursite.com/tags/casually/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://yoursite.com/2019/06/12/Test/"/>
    <id>http://yoursite.com/2019/06/12/Test/</id>
    <published>2019-06-12T07:25:45.000Z</published>
    <updated>2019-06-13T09:10:39.416Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个测试，这只是一个测试，什么都没有。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一个测试，这只是一个测试，什么都没有。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Hello" scheme="http://yoursite.com/categories/Hello/"/>
    
    
      <category term="Hello" scheme="http://yoursite.com/tags/Hello/"/>
    
  </entry>
  
  <entry>
    <title>基础版DAO设计</title>
    <link href="http://yoursite.com/2019/06/01/%E5%9F%BA%E7%A1%80%E7%89%88DAO%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/06/01/基础版DAO设计/</id>
    <published>2019-06-01T07:39:32.000Z</published>
    <updated>2022-06-03T05:34:48.176Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久以前</p><p>总有大佬让我帮他DAO debug，于是终于有了此篇文章.</p><h2 id="基础版DAO设计"><a href="#基础版DAO设计" class="headerlink" title="基础版DAO设计"></a>基础版DAO设计</h2><h3 id="DAO设计思路"><a href="#DAO设计思路" class="headerlink" title="DAO设计思路"></a>DAO设计思路</h3><h5 id="1、建立VO类"><a href="#1、建立VO类" class="headerlink" title="1、建立VO类"></a>1、建立VO类</h5><h5 id="2、建立数据连接"><a href="#2、建立数据连接" class="headerlink" title="2、建立数据连接"></a>2、建立数据连接</h5><p>ThreadLocal类设置局部变量conn确保线程安全</p><p>getConnection()方法和rebuildConnection方法()</p><h5 id="3、数据层操作"><a href="#3、数据层操作" class="headerlink" title="3、数据层操作"></a>3、数据层操作</h5><p>定义DAO操作公共标准，包括增、减、查、分页、统计等操作</p><p>定义特定VO类操作标准</p><p>实现类</p><h5 id="4、业务层操作"><a href="#4、业务层操作" class="headerlink" title="4、业务层操作"></a>4、业务层操作</h5><p>Service操作标准，包括增、减、查、分页、统计等方法</p><p>建立工厂类获取DAO类实例化对象</p><p>实现类</p><h5 id="5、测试类"><a href="#5、测试类" class="headerlink" title="5、测试类"></a>5、测试类</h5><p>代理类处理业务层操作(判断事务控制)</p><p>工厂类获取业务层代理类实例化对象(绑定业务层实例化对象)</p><p>测试操作(客户端调用)</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h5 id="创建一个数据表"><a href="#创建一个数据表" class="headerlink" title="创建一个数据表"></a>创建一个数据表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE member PURGE ;</span><br><span class="line">CREATE TABLE member(</span><br><span class="line">midVARCHAR2(20),</span><br><span class="line">nameVARCHAR2(20),</span><br><span class="line">ageNUMBER(3),</span><br><span class="line">emailVARCHAR2(50),</span><br><span class="line">sexVARCHAR2(10),</span><br><span class="line">birthdayDATE,</span><br><span class="line">noteCLOB,</span><br><span class="line">CONSTRAINT pk_mid PRIMARY KEY(mid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="实现VO类"><a href="#实现VO类" class="headerlink" title="实现VO类"></a>实现VO类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package vo;</span><br><span class="line">import java.sql.Date;</span><br><span class="line">public class Member &#123;</span><br><span class="line">    private String mid ;</span><br><span class="line">    private String name ;</span><br><span class="line">    private Integer age ;</span><br><span class="line">    private String email ;</span><br><span class="line">    private String sex ;</span><br><span class="line">    private Date birthday ;</span><br><span class="line">    private String node ;</span><br><span class="line">    public Member() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Member&#123;&quot; +</span><br><span class="line">                &quot;mid=&apos;&quot; + mid + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, email=&apos;&quot; + email + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, sex=&apos;&quot; + sex + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, birthday=&quot; + birthday +</span><br><span class="line">                &quot;, node=&apos;&quot; + node + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    public Member(String mid, String name, Integer age, String email, String sex, Date birthday, String node) &#123;</span><br><span class="line">        this.mid = mid;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        this.birthday = birthday;</span><br><span class="line">        this.node = node;</span><br><span class="line">    &#125;</span><br><span class="line">//setter、getter略</span><br></pre></td></tr></table></figure><h5 id="创建数据库连接类"><a href="#创建数据库连接类" class="headerlink" title="创建数据库连接类"></a>创建数据库连接类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package util.dbc;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">public class DatabaseConnection &#123;</span><br><span class="line">    private static final String DBDRIVER = &quot;oracle.jdbc.driver.OracleDriver&quot; ;</span><br><span class="line">    private static final String DBULR = &quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot; ;</span><br><span class="line">    private static final String USER = &quot;scott&quot; ;</span><br><span class="line">    private static final String PASSWORD = &quot;tiger&quot; ;</span><br><span class="line">    private static final ThreadLocal&lt;Connection&gt; CONNECTION_THREAD_LOCAL = new ThreadLocal&lt;&gt;() ;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过构造方法进行实例化，表示需要获取一个数据库连接</span><br><span class="line">     * 数据库的连接通过本类的实例封装，调用此方法连接数据库</span><br><span class="line">     */</span><br><span class="line">    private DatabaseConnection()&#123;&#125;</span><br><span class="line">    public static void rebuildConnection()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Class.forName(DBDRIVER) ;//驱动加载</span><br><span class="line">            Connection conn = DriverManager.getConnection(DBULR,USER,PASSWORD) ;</span><br><span class="line">            CONNECTION_THREAD_LOCAL.set(conn);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回一个JDBC连接对象，如果连接失败返回null</span><br><span class="line">     * @return Connection接口实例</span><br><span class="line">     */</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = CONNECTION_THREAD_LOCAL.get() ;</span><br><span class="line">        if(conn == null)&#123;//如果conn为空，调用rebuildConnection实现数据库的连接</span><br><span class="line">            rebuildConnection();</span><br><span class="line">            conn = CONNECTION_THREAD_LOCAL.get() ;</span><br><span class="line">        &#125;</span><br><span class="line">        return conn ;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close() throws Exception &#123;</span><br><span class="line">        Connection conn = CONNECTION_THREAD_LOCAL.get() ;</span><br><span class="line">        if(conn != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;catch(SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            CONNECTION_THREAD_LOCAL.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAO操作"><a href="#DAO操作" class="headerlink" title="DAO操作"></a>DAO操作</h3><h5 id="定义公共DAO操作标准"><a href="#定义公共DAO操作标准" class="headerlink" title="定义公共DAO操作标准"></a>定义公共DAO操作标准</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package dao;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DAO公共接口</span><br><span class="line"> * @param &lt;K&gt; 主键类型</span><br><span class="line"> * @param &lt;V&gt; VO类型</span><br><span class="line"> */</span><br><span class="line">public interface IBaseDAO&lt;K,V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 实现数据增加操作</span><br><span class="line">     *</span><br><span class="line">     * @param vo 保存要增加的数据的信息类，该类属性确定已经合法</span><br><span class="line">     * @return 数据保存成功return true，否则 return false</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public boolean doCreate(V vo) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实现数据修改操作，根据id进行修改</span><br><span class="line">     *</span><br><span class="line">     * @param vo 保存要修改数据的完整数据</span><br><span class="line">     * @return 修改成功返回 true ，否则返回false</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public boolean doEdit(V vo) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数据的删除操作，可以删除指定范围中的数据信息</span><br><span class="line">     *</span><br><span class="line">     * @param ids 要删除的数据id，不允许重复</span><br><span class="line">     * @return 删除成功返回true ，否则返回false</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public boolean doRemove(Set&lt;K&gt; ids) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询数据</span><br><span class="line">     *</span><br><span class="line">     * @param id 要查询的数据id</span><br><span class="line">     * @return 数据存在返回数据对象，否则返回null</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public V findById(K id) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有数据</span><br><span class="line">     *</span><br><span class="line">     * @return 返回所有数据对象的集合，如果没有数据则集合长度为0</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">    */</span><br><span class="line">    public List&lt;V&gt; findAll() throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 全部分页信息的查询</span><br><span class="line">     *</span><br><span class="line">     * @param currentPage 当前所在页</span><br><span class="line">     * @param lineSize    每页数据行数</span><br><span class="line">     * @return 返回该页数据对象的集合，如果没有数据则返回集合长度为0</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public List&lt;V&gt; findSplit(Integer currentPage, Integer lineSize) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据关键字分页查询</span><br><span class="line">     *</span><br><span class="line">     * @param currentPage 当前所在页</span><br><span class="line">     * @param lineSize    每页显示的数据行数</span><br><span class="line">     * @param column      模糊查询的列</span><br><span class="line">     * @param keyword     模糊查询的关键字</span><br><span class="line">     * @return 如果存在以集合形式返回数据对象，如果数据不存在返回集合长度为0</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public List&lt;V&gt; findSplit(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 统计全部数据</span><br><span class="line">     *</span><br><span class="line">     * @return COUNT()函数的返回结果</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public Long getAllCount() throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 统计搜索数据数量</span><br><span class="line">     *</span><br><span class="line">     * @param column  模糊查询列</span><br><span class="line">     * @param keyword 模糊查询关键字</span><br><span class="line">     * @return COUNT()函数返回的结果</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public Long getAllCount(String column, String keyword) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义IMemberDAO操作标准"><a href="#定义IMemberDAO操作标准" class="headerlink" title="定义IMemberDAO操作标准"></a>定义IMemberDAO操作标准</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package dao;</span><br><span class="line">import vo.Member;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public interface IMemberDAO extends IBaseDAO&lt;String ,Member&gt;&#123;//继承父接口全部方法</span><br><span class="line">    /**</span><br><span class="line">     * 根据email查询数据</span><br><span class="line">     * @param email 要查询数据的email</span><br><span class="line">     * @return 数据存在返回数据对象，否则返回null</span><br><span class="line">     * @throws SQLException 数据库执行异常</span><br><span class="line">     */</span><br><span class="line">    public Member findByEmail(String email)throws SQLException ;//member表操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DAO抽象类进行公共处理"><a href="#DAO抽象类进行公共处理" class="headerlink" title="DAO抽象类进行公共处理"></a>DAO抽象类进行公共处理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package util.abs;</span><br><span class="line">import util.dbc.DatabaseConnection;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public abstract class AbstractDAO &#123;</span><br><span class="line">    protected PreparedStatement pstmt ;</span><br><span class="line">    protected Connection conn ;</span><br><span class="line">    public AbstractDAO()&#123;</span><br><span class="line">        this.conn = DatabaseConnection.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    protected Long handleGetAllCount(String tableName) throws SQLException &#123;</span><br><span class="line">        String sql = &quot;SELECT COUNT(*) FROM &quot; + tableName ;</span><br><span class="line">        this.pstmt = this.conn.prepareStatement(sql) ;</span><br><span class="line">        ResultSet rs = this.pstmt.executeQuery() ;</span><br><span class="line">        if(rs.next())&#123;</span><br><span class="line">            return rs.getLong(1) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0L ;</span><br><span class="line">    &#125;</span><br><span class="line">    protected Long hangdleGetAllCount(String tableName,String column, String keyword) throws SQLException &#123;</span><br><span class="line">        String sql = &quot;SELECT COUNT(*) FROM &quot; + tableName + &quot; WHERE &quot; + column + &quot; LIKE ? &quot; ;</span><br><span class="line">        this.pstmt = this.conn.prepareStatement(sql) ;</span><br><span class="line">        this.pstmt.setString(1,&quot;%&quot; + keyword + &quot;%&quot;);</span><br><span class="line">        ResultSet rs = this.pstmt.executeQuery() ;</span><br><span class="line">        if(rs.next())&#123;</span><br><span class="line">            return rs.getLong(1) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0L ;</span><br><span class="line">    &#125;</span><br><span class="line">    protected boolean handleRemoveByString(String tableName, String idColumn, Set&lt;String&gt; ids) throws SQLException&#123;</span><br><span class="line">        StringBuffer sql = new StringBuffer(30) ;</span><br><span class="line">        sql.append(&quot;DELETE FROM &quot;).append(tableName).append(&quot; WHERE &quot;).append(idColumn).append(&quot; IN (&quot; );</span><br><span class="line">        ids.forEach((id)-&gt;&#123;</span><br><span class="line">            sql.append(&quot;?,&quot;) ;</span><br><span class="line">        &#125;);</span><br><span class="line">        sql.delete(sql.length()-1,sql.length()).append(&quot;)&quot;) ;</span><br><span class="line">        this.pstmt = this.conn.prepareStatement(sql.toString()) ;</span><br><span class="line">        Iterator&lt;String&gt; iter = ids.iterator() ;</span><br><span class="line">        int foot = 1 ;</span><br><span class="line">        while(iter.hasNext())&#123;</span><br><span class="line">            this.pstmt.setString(foot++,iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">        return this.pstmt.executeUpdate() == ids.size() ;</span><br><span class="line">    &#125;</span><br><span class="line">    protected boolean handleRemoveByLong(String tableName, String idColumn, Set&lt;Long&gt; ids) throws SQLException&#123;</span><br><span class="line">        StringBuffer sql = new StringBuffer(30) ;</span><br><span class="line">        sql.append(&quot;DELETE FROM &quot;).append(tableName).append(&quot; WHERE &quot;).append(idColumn).append(&quot; IN (&quot; );</span><br><span class="line">        ids.forEach((id)-&gt;&#123;</span><br><span class="line">            sql.append(&quot;?,&quot;) ;</span><br><span class="line">        &#125;);</span><br><span class="line">        sql.delete(sql.length()-1,sql.length()).append(&quot;)&quot;) ;</span><br><span class="line">        this.pstmt = this.conn.prepareStatement(sql.toString()) ;</span><br><span class="line">        Iterator&lt;Long&gt; iter = ids.iterator() ;</span><br><span class="line">        int foot = 1 ;</span><br><span class="line">        while(iter.hasNext())&#123;</span><br><span class="line">            this.pstmt.setLong(foot++, iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">        return this.pstmt.executeUpdate() == ids.size() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="IMemberDAO实现类"><a href="#IMemberDAO实现类" class="headerlink" title="IMemberDAO实现类"></a>IMemberDAO实现类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">package dao.impl;</span><br><span class="line">import util.abs.AbstractDAO;</span><br><span class="line">import util.dbc.DatabaseConnection;</span><br><span class="line">import vo.Member;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.Date;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Set;</span><br><span class="line">public class MemberDAOImpl extends AbstractDAO implements dao.IMemberDAO &#123;</span><br><span class="line">    public MemberDAOImpl() &#123;</span><br><span class="line">        DatabaseConnection.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean doCreate(Member vo) throws SQLException &#123;</span><br><span class="line">        String sql = &quot;INSERT INTO member(mid,name,age,email,sex,birthday,note) VALUES (?,?,?,?,?,?,?)&quot; ;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setString(1,vo.getMid());</span><br><span class="line">        super.pstmt.setString(2,vo.getName());</span><br><span class="line">        super.pstmt.setInt(3,vo.getAge());</span><br><span class="line">        super.pstmt.setString(4,vo.getEmail());</span><br><span class="line">        super.pstmt.setString(5,vo.getSex());</span><br><span class="line">        super.pstmt.setDate(6,vo.getBirthday());</span><br><span class="line">        super.pstmt.setString(7,vo.getNode());</span><br><span class="line">        return super.pstmt.executeUpdate() &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean doEdit(Member vo) throws SQLException &#123;</span><br><span class="line">        String sql = &quot;UPDATE member SET name=?,age=?,email=?,sex=?,birthday=?,note=? WHERE mid=?&quot; ;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setString(1,vo.getName());</span><br><span class="line">        super.pstmt.setInt(2,vo.getAge());</span><br><span class="line">        super.pstmt.setString(3,vo.getEmail());</span><br><span class="line">        super.pstmt.setString(4,vo.getSex());</span><br><span class="line">        super.pstmt.setDate(5,vo.getBirthday());</span><br><span class="line">        super.pstmt.setString(6,vo.getNode());</span><br><span class="line">        super.pstmt.setString(7,vo.getMid());</span><br><span class="line">        return super.pstmt.executeUpdate() &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean doRemove(Set&lt;String&gt; ids) throws SQLException &#123;</span><br><span class="line">        return super.handleRemoveByString(&quot;member&quot;,&quot;mid&quot;,ids) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Member findById(String id) throws SQLException &#123;</span><br><span class="line">        Member vo = null ;</span><br><span class="line">        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member WHERE mid=?&quot; ;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setString(1,id);</span><br><span class="line">        ResultSet rs = super.pstmt.executeQuery() ;</span><br><span class="line">        if(rs.next())&#123;</span><br><span class="line">            vo = new Member() ;</span><br><span class="line">            vo.setMid(rs.getString(1));</span><br><span class="line">            vo.setName(rs.getString(2));</span><br><span class="line">            vo.setAge(rs.getInt(3));</span><br><span class="line">            vo.setSex(rs.getString(4));</span><br><span class="line">            vo.setEmail(rs.getString(5));</span><br><span class="line">            vo.setBirthday(rs.getDate(6)) ;</span><br><span class="line">            vo.setNode(rs.getString(7)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return vo ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Member findByEmail(String email) throws SQLException &#123;</span><br><span class="line">        Member vo = null ;</span><br><span class="line">        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member WHERE email=?&quot; ;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setString(1,email);</span><br><span class="line">        ResultSet rs = super.pstmt.executeQuery() ;</span><br><span class="line">        if(rs.next())&#123;</span><br><span class="line">            vo = new Member() ;</span><br><span class="line">            vo.setMid(rs.getString(1));</span><br><span class="line">            vo.setName(rs.getString(2));</span><br><span class="line">            vo.setAge(rs.getInt(3));</span><br><span class="line">            vo.setSex(rs.getString(4));</span><br><span class="line">            vo.setEmail(rs.getString(5));</span><br><span class="line">            vo.setBirthday(rs.getDate(6)) ;</span><br><span class="line">            vo.setNode(rs.getString(7)) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return vo ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Member&gt; findAll() throws SQLException &#123;</span><br><span class="line">        List&lt;Member&gt; all = new ArrayList() ;</span><br><span class="line">        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member&quot; ;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        ResultSet rs = super.pstmt.executeQuery() ;</span><br><span class="line">        while(rs.next())&#123;</span><br><span class="line">            Member vo = new Member() ;</span><br><span class="line">            vo.setMid(rs.getString(1));</span><br><span class="line">            vo.setName(rs.getString(2));</span><br><span class="line">            vo.setAge(rs.getInt(3));</span><br><span class="line">            vo.setSex(rs.getString(4));</span><br><span class="line">            vo.setEmail(rs.getString(5));</span><br><span class="line">            vo.setBirthday(rs.getDate(6)) ;</span><br><span class="line">            vo.setNode(rs.getString(7)) ;</span><br><span class="line">            all.add(vo) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return all ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Member&gt; findSplit(Integer currentPage, Integer lineSize) throws SQLException &#123;</span><br><span class="line">        List&lt;Member&gt; all = new ArrayList&lt;&gt;() ;</span><br><span class="line">        String sql = &quot;SELECT * FROM ( &quot; +</span><br><span class="line">                &quot; SELECT mid,name,age,email,sex,birthday,note,ROWNUM rn FROM member &quot; +</span><br><span class="line">                &quot; WHERE ROWNUM &lt;= ? )temp WHERE temp.rn &gt; ? &quot;;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setInt(1,currentPage * lineSize);</span><br><span class="line">        super.pstmt.setInt(2,(currentPage - 1) * lineSize);</span><br><span class="line">        ResultSet rs = super.pstmt.executeQuery();</span><br><span class="line">        while(rs.next())&#123;</span><br><span class="line">            Member vo = new Member() ;</span><br><span class="line">            vo.setMid(rs.getString(1));</span><br><span class="line">            vo.setName(rs.getString(2));</span><br><span class="line">            vo.setAge(rs.getInt(3));</span><br><span class="line">            vo.setSex(rs.getString(4));</span><br><span class="line">            vo.setEmail(rs.getString(5));</span><br><span class="line">            vo.setBirthday(rs.getDate(6)) ;</span><br><span class="line">            vo.setNode(rs.getString(7)) ;</span><br><span class="line">            all.add(vo) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return all ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Member&gt; findSplit(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException &#123;</span><br><span class="line">        List&lt;Member&gt; all = new ArrayList&lt;&gt;() ;</span><br><span class="line">        String sql = &quot;SELECT * FROM ( &quot; +</span><br><span class="line">                &quot; SELECT mid,name,age,email,sex,birthday,note,ROWNUM rn FROM member &quot; +</span><br><span class="line">                &quot; WHERE &quot; + column + &quot; LIKE ? AND ROWNUM &lt;= ? ) temp WHERE temp.rn &gt; ? &quot;;</span><br><span class="line">        super.pstmt = super.conn.prepareStatement(sql) ;</span><br><span class="line">        super.pstmt.setString(1,&quot;%&quot; + keyword + &quot;%&quot;);</span><br><span class="line">        super.pstmt.setInt(2,currentPage * lineSize);</span><br><span class="line">        super.pstmt.setInt(3,(currentPage - 1) * lineSize);</span><br><span class="line">        ResultSet rs = super.pstmt.executeQuery() ;</span><br><span class="line">        while(rs.next())&#123;</span><br><span class="line">            Member vo = new Member() ;</span><br><span class="line">            vo.setMid(rs.getString(1));</span><br><span class="line">            vo.setName(rs.getString(2));</span><br><span class="line">            vo.setAge(rs.getInt(3));</span><br><span class="line">            vo.setSex(rs.getString(4));</span><br><span class="line">            vo.setEmail(rs.getString(5));</span><br><span class="line">            vo.setBirthday(rs.getDate(6)) ;</span><br><span class="line">            vo.setNode(rs.getString(7)) ;</span><br><span class="line">            all.add(vo) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return all ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long getAllCount() throws SQLException &#123;</span><br><span class="line">        return super.handleGetAllCount(&quot;member&quot;) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long getAllCount(String column, String keyword) throws SQLException &#123;</span><br><span class="line">        return super.hangdleGetAllCount(&quot;member&quot;,column,keyword) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂类获取实例化对象"><a href="#工厂类获取实例化对象" class="headerlink" title="工厂类获取实例化对象"></a>工厂类获取实例化对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package util.factory;</span><br><span class="line">import util.proxy.ServiceProxy;</span><br><span class="line">import java.util.ResourceBundle;</span><br><span class="line">public class ObjectFactory &#123;</span><br><span class="line">/**</span><br><span class="line">*创建配置文件</span><br><span class="line">*resource.dao(member.dao=dao.imple.IMemberDAOImpl)</span><br><span class="line">**/</span><br><span class="line">    private static final ResourceBundle DAO_RESOURCE = ResourceBundle.getBundle(&quot;resource.dao&quot;) ;</span><br><span class="line">    public static&lt;T&gt; T getDAOInstance(String key,Class&lt;T&gt;...clazz)&#123;</span><br><span class="line">        String className = null ;</span><br><span class="line">        try&#123;</span><br><span class="line">            className = DAO_RESOURCE.getString(key) ;</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            if(className == null || &quot;&quot;.equals(className))&#123;</span><br><span class="line">                return null ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            return (T) Class.forName(className).getDeclaredConstructor().newInstance() ;</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            return null ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务层实现"><a href="#业务层实现" class="headerlink" title="业务层实现"></a>业务层实现</h3><h5 id="定义业务层操作标准"><a href="#定义业务层操作标准" class="headerlink" title="定义业务层操作标准"></a>定义业务层操作标准</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package service;</span><br><span class="line">import vo.Member;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public interface IMemberService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 实现数据的增加操作</span><br><span class="line">     * 1，检查输入数据是否正确</span><br><span class="line">     * 2，调用IMemberDAO.findDyId()方法判断当前增加id是否存在</span><br><span class="line">     * 3，调用IMemberDAO.findByEmail()方法判断当前增加的Email是否存在</span><br><span class="line">     * 4，没有问题则调用ImemberDAO.doCreate()方法实现数据的增加</span><br><span class="line">     * @param vo 要增加的数据对象</span><br><span class="line">     * @return 增加成功返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean add(Member vo) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实现数据的修改操作</span><br><span class="line">     * 该操作调用IMemberDAO.doEdit()方法进行全部的数据更新，根据id完成</span><br><span class="line">     * @param vo 要更新的数据对象，一定要包含id</span><br><span class="line">     * @return 修改成功返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean edit(Member vo) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数据的删除操作</span><br><span class="line">     * 调用IMemberDAO.doRemove()方法</span><br><span class="line">     * @param ids 所有要删除的数据的id的集合</span><br><span class="line">     * @return 全部删除成功返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean removeById(String ...ids) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询数据</span><br><span class="line">     * 调用IMemberDAO.findById（)方法</span><br><span class="line">     * @param id 要查询的id</span><br><span class="line">     * @return 数据存在返回vo对象，否则返回null</span><br><span class="line">     */</span><br><span class="line">    public Member get(String id) throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询全部数据</span><br><span class="line">     * 调用IMemberDAO.findAll()方法</span><br><span class="line">     * @return 返回数据对象的集合，如果数据不存在则返回集合长度为0</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Member&gt; list() throws SQLException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数据的分页查询和数据统计</span><br><span class="line">     * 如果column和keyword为空，则进行全部数据查询以及统计</span><br><span class="line">     * 如果column和keyword不为空，则进行查询数据的分页显示以及统计</span><br><span class="line">     * @param currentPage 当前所在页</span><br><span class="line">     * @param lineSize 每页行数</span><br><span class="line">     * @param column 查询的列</span><br><span class="line">     * @param keyword 关键字</span><br><span class="line">     * @return 返回两种数据结果</span><br><span class="line">     * key = allResult，value = List 数据的查询结果</span><br><span class="line">     * key = allCount， value = Long 统计结果</span><br><span class="line">     */</span><br><span class="line">    public Map&lt;String,Object&gt; split(Integer currentPage,Integer lineSize,String column,String keyword) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="业务层实现类"><a href="#业务层实现类" class="headerlink" title="业务层实现类"></a>业务层实现类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package service.impl;</span><br><span class="line">import dao.IMemberDAO;</span><br><span class="line">import service.IMemberService;</span><br><span class="line">import util.dbc.DatabaseConnection;</span><br><span class="line">import util.factory.ObjectFactory;</span><br><span class="line">import vo.Member;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class MemberServiceImpl implements IMemberService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean add(Member vo) throws SQLException &#123;</span><br><span class="line">//判断数据是否正确</span><br><span class="line">        if (vo.getAge() &gt; 150 || vo.getAge() &lt; 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!(vo.getSex().equalsIgnoreCase(&quot;F&quot;) || vo.getSex().equalsIgnoreCase(&quot;M&quot;))) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;);</span><br><span class="line">        if (memberDAO.findById(vo.getMid()) == null) &#123; //mid和email不可重复</span><br><span class="line">            if (memberDAO.findByEmail(vo.getEmail()) == null) &#123;</span><br><span class="line">                return memberDAO.doCreate(vo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean edit(Member vo) throws SQLException &#123;</span><br><span class="line">        if (vo.getAge() &gt; 150 || vo.getAge() &lt; 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!(vo.getSex().equalsIgnoreCase(&quot;F&quot;) || vo.getSex().equalsIgnoreCase(&quot;M&quot;))) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);</span><br><span class="line">        return memberDAO.doEdit(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean removeById(String... ids) throws SQLException &#123;</span><br><span class="line">        if (ids.length == 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">        set.addAll(Arrays.asList(ids));</span><br><span class="line">        DatabaseConnection.getConnection().setAutoCommit(false);</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;,IMemberDAO.class);</span><br><span class="line">        return memberDAO.doRemove(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Member get(String id) throws SQLException &#123;</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;,IMemberDAO.class);</span><br><span class="line">        return memberDAO.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Member&gt; list() throws SQLException &#123;</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);</span><br><span class="line">        return memberDAO.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Map&lt;String, Object&gt; split(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);</span><br><span class="line">        if (column == null || &quot;&quot;.equalsIgnoreCase(column) || keyword == null || &quot;&quot;.equalsIgnoreCase(keyword)) &#123;</span><br><span class="line">            map.put(&quot;allMembers&quot;, memberDAO.findSplit(currentPage, lineSize));</span><br><span class="line">            map.put(&quot;allRecorders&quot;, memberDAO.getAllCount());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            map.put(&quot;allMembers&quot;, memberDAO.findSplit(currentPage, lineSize, column, keyword));</span><br><span class="line">            map.put(&quot;allRecorders&quot;, memberDAO.getAllCount(column, keyword));</span><br><span class="line">        &#125;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类和工厂类获取业务层实例化对象"><a href="#代理类和工厂类获取业务层实例化对象" class="headerlink" title="代理类和工厂类获取业务层实例化对象"></a>代理类和工厂类获取业务层实例化对象</h3><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package util.proxy;</span><br><span class="line">import util.dbc.DatabaseConnection;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class ServiceProxy implements InvocationHandler &#123;</span><br><span class="line">    private static final List&lt;String&gt; TRANSACTION_METHOD_HEAD = List.of(&quot;add&quot;,&quot;create&quot;,&quot;edit&quot;,&quot;update&quot;,&quot;remove&quot;,&quot;delete&quot;) ;//需要事务控制的方法名</span><br><span class="line">    private Object target ;</span><br><span class="line">    public Object bind(Object target)&#123;//绑定真实操作类</span><br><span class="line">        this.target = target ;</span><br><span class="line">        return Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this) ;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        Object result = null ;</span><br><span class="line">        boolean transactionFlag = this.openTransaction(method.getName()) ;</span><br><span class="line">        if(transactionFlag)&#123;</span><br><span class="line">            DatabaseConnection.getConnection().setAutoCommit(false);</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            result = method.invoke(this.target,args) ;</span><br><span class="line">            if(transactionFlag)&#123;</span><br><span class="line">                DatabaseConnection.getConnection().commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            if(transactionFlag)&#123;</span><br><span class="line">                DatabaseConnection.getConnection().rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            throw e ;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            DatabaseConnection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return result ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*判断是否需要事务控制</span><br><span class="line">**/</span><br><span class="line">    private boolean openTransaction(String methodName) &#123;</span><br><span class="line">        Iterator&lt;String&gt; iter = TRANSACTION_METHOD_HEAD.iterator() ;</span><br><span class="line">        while(iter.hasNext())&#123;</span><br><span class="line">            if(methodName.startsWith(iter.next()))&#123;</span><br><span class="line">                return true ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂类获取业务层实例化对象"><a href="#工厂类获取业务层实例化对象" class="headerlink" title="工厂类获取业务层实例化对象"></a>工厂类获取业务层实例化对象</h5><p>创建配置文件resource.service(member.service=service.imple.IMemberServiceImpl)</p><p>在工厂类中增加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static final ResourceBundle SERVICE_RESOURCE = ResourceBundle.getBundle(&quot;resource.service&quot;) ;</span><br><span class="line">public static &lt;T&gt; T getServiceInstance(String key,Class&lt;T&gt;...clazz)&#123;</span><br><span class="line">      String className = null ;</span><br><span class="line">    try&#123;</span><br><span class="line">        className = SERVICE_RESOURCE.getString(key) ;</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        if(className == null || &quot;&quot;.equals(className))&#123;</span><br><span class="line">           return null </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    try&#123;</span><br><span class="line">        return (T) new ServiceProxy().bind(</span><br><span class="line">        Class.forName(className).getDeclaredConstructor().newInstance()) ;</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">    return null ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line">import junit.framework.TestCase;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import service.IMemberService;</span><br><span class="line">import util.factory.ObjectFactory;</span><br><span class="line">import vo.Member;</span><br><span class="line">import java.sql.Date;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class MemberServiceImplTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void add() throws SQLException &#123;</span><br><span class="line">        Member member = new Member() ;</span><br><span class="line">        member.setMid(&quot;0000&quot;) ;</span><br><span class="line">        member.setName(&quot;sblj&quot;) ;</span><br><span class="line">        member.setAge(18) ;</span><br><span class="line">        member.setEmail(&quot;sblj@git.cn&quot;) ;</span><br><span class="line">        member.setSex(&quot;F&quot;) ;</span><br><span class="line">        try &#123;</span><br><span class="line">            member.setBirthday(new Date(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2000-01-01&quot;).getTime())) ;</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        member.setNode(&quot;是个大美女&quot;);</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        TestCase.assertTrue(memberService.add(member));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void edit() throws SQLException &#123;</span><br><span class="line">        Member member = new Member() ;</span><br><span class="line">        member.setMid(&quot;0000&quot;) ;</span><br><span class="line">        member.setName(&quot;sblj&quot;) ;</span><br><span class="line">        member.setAge(18) ;</span><br><span class="line">        member.setEmail(&quot;这里不能重复@git.cn&quot;) ;</span><br><span class="line">        member.setSex(&quot;F&quot;) ;</span><br><span class="line">        try &#123;</span><br><span class="line">            member.setBirthday(new Date(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2000-01-01&quot;).getTime())) ;</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        member.setNode(&quot;还是个大美女&quot;);</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        TestCase.assertTrue(memberService.edit(member));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void removeById() throws SQLException &#123;</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        TestCase.assertTrue(memberService.removeById(&quot;0000&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">//删除后再add()一次，不然没有数据哦</span><br><span class="line">    @Test</span><br><span class="line">    public void get() throws SQLException &#123;</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        Member member = memberService.get(&quot;0000&quot;) ;</span><br><span class="line">        TestCase.assertNotNull(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void list() throws SQLException &#123;</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        List&lt;Member&gt; all = memberService.list() ;</span><br><span class="line">        TestCase.assertTrue(all.size()&gt;0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void split() throws SQLException &#123;</span><br><span class="line">        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;</span><br><span class="line">        Map&lt;String,Object&gt; map = memberService.split(1,1,&quot;&quot;,&quot;&quot;) ;</span><br><span class="line">//Map&lt;String,Object&gt; map = memberService.split(1,1,&quot;mid&quot;,&quot;0&quot;) ;//两种分别测试一下</span><br><span class="line">        TestCase.assertTrue(map.get(&quot;allMembers&quot;) != null &amp;&amp; map.get(&quot;allRecorders&quot;) != null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><h5 id="java-lang-NullPointException"><a href="#java-lang-NullPointException" class="headerlink" title="java.lang.NullPointException"></a>java.lang.NullPointException</h5><ul><li><p>常见于dbc，factory，proxy操作中，如果遇到空指向，先检查是否这部分出错；</p><p>  一个奇怪（葩）的问题，如果add、edit、remove方法通过，查询方法报错，检查ServiceProxy类的事务控制逻辑是否有误</p></li><li><p>SQL语句拼接错误</p><p>  此处要小心空格的问题，以及占位符（？）的值的设置</p><h5 id="junit-framework-AssertionFailedError"><a href="#junit-framework-AssertionFailedError" class="headerlink" title="junit.framework.AssertionFailedError"></a>junit.framework.AssertionFailedError</h5><p>断言错误，TestCase断言错误，此时一般要查询Service实现类中返回的数据</p><h5 id="数据库连接失败"><a href="#数据库连接失败" class="headerlink" title="数据库连接失败"></a>数据库连接失败</h5><p>检查数据库服务是否开启，url，driver，user，password是否配置错误</p></li></ul><h3 id="DAO实现思路（debug路线）"><a href="#DAO实现思路（debug路线）" class="headerlink" title="DAO实现思路（debug路线）"></a>DAO实现思路（debug路线）</h3><p>工厂类(代理对象(ServiceImpl类实例化对象))获取IService类实例化对象→调用操作方法(ServiceImpl下的方法)→实例化IDAO对象(通过工厂类由DAOImpl对象向上转型获得)→调用DAO层方法→调用AbstractDAO类方法获取数据库连接→数据层操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久很久以前&lt;/p&gt;
&lt;p&gt;总有大佬让我帮他DAO debug，于是终于有了此篇文章.&lt;/p&gt;
&lt;h2 id=&quot;基础版DAO设计&quot;&gt;&lt;a href=&quot;#基础版DAO设计&quot; class=&quot;headerlink&quot; title=&quot;基础版DAO设计&quot;&gt;&lt;/a&gt;基础版DAO设计&lt;/h
      
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="DAO" scheme="http://yoursite.com/tags/DAO/"/>
    
  </entry>
  
  <entry>
    <title>JVM常用参数</title>
    <link href="http://yoursite.com/2019/05/01/JVM%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/05/01/JVM常用参数/</id>
    <published>2019-05-01T07:39:32.000Z</published>
    <updated>2019-07-01T14:51:49.014Z</updated>
    
    <content type="html"><![CDATA[<p>##编译器<br>-client：C1，启动速度快，占用内存小，执行效率慢于C2模式，默认状态下不进行动态编译，适合于单机桌面版程序运行</p><p>-server：C2，默认的编译器，启动速度慢，占用内存多，执行效率高，适合于服务器端使用</p><p>##内存配置<br>-Xms:初始堆大小</p><p>-Xmx：最大堆大小</p><p>-Xss：设置每个线程的堆栈大小。JDK 5 以后每个线程栈大小为1M，以前每个线程堆栈大小为256k</p><p>-XX:NewSize=n:设置年轻代大小</p><p>-XX:NewRatio=n:设置年轻代和年老代的比值。如：3表示年轻代和年老代比值为3：1，年轻代占整个年轻代年老代和的1/4</p><p>-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如3表示Eden： 3 Survivor：2，一个Survivor区占整个年轻代的1/5</p><p>-XX:MaxPermSize=n:设置永久代大小</p><p>##收集器设置<br> -XX:+UseSerialGC:设置串行收集器</p><p> -XX:+UseParallelGC:设置并行收集器，仅对年轻代有效，此配置下，年轻代使用并行收集，而年老代仍旧使用串行收集。</p><p> -XX:+UseParalledlOldGC:设置并行年老代收集器，JDK 6 支持对老年代并行收集</p><p> -XX:+UseConcMarkSweepGC:设置并发收集器</p><p>##垃圾回收统计信息<br>-XX:+PrintGC </p><p>-XX:+PrintGCDetails</p><p>-XX:+PrintGCTimeStamps</p><p>-Xloggc:filename</p><p>##并行收集器配置<br>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数</p><p>-XX:MaxGCPauseMillis=n:设置并行收集最大的暂停时间（如果到时间没有回收完，会停止回收）</p><p>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为：1/(1+n)</p><p>-XX:+CMSIncrementalMode:设置为增量模式</p><p>-XX:+UseAdaptiveSizePolicy:设置此选项以后，并行收集器会自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时间或者收集频率等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##编译器&lt;br&gt;-client：C1，启动速度快，占用内存小，执行效率慢于C2模式，默认状态下不进行动态编译，适合于单机桌面版程序运行&lt;/p&gt;
&lt;p&gt;-server：C2，默认的编译器，启动速度慢，占用内存多，执行效率高，适合于服务器端使用&lt;/p&gt;
&lt;p&gt;##内存配置&lt;b
      
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/20/hello-world/"/>
    <id>http://yoursite.com/2018/11/20/hello-world/</id>
    <published>2018-11-20T11:34:14.000Z</published>
    <updated>2019-06-13T09:09:27.430Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Hello" scheme="http://yoursite.com/categories/Hello/"/>
    
    
      <category term="Hello" scheme="http://yoursite.com/tags/Hello/"/>
    
  </entry>
  
</feed>
