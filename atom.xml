<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Such a Pretty Girl</title>
  
  <subtitle>I do as I can.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-21T16:34:08.734Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Catherine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础版DAO设计</title>
    <link href="http://yoursite.com/2019/04/18/%E5%9F%BA%E7%A1%80%E7%89%88DAO%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/04/18/基础版DAO设计/</id>
    <published>2019-04-17T16:41:55.689Z</published>
    <updated>2019-04-21T16:34:08.734Z</updated>
    
    <content type="html"><![CDATA[<p>总有大佬让我帮他DAO debug，于是终于有了此篇文章.</p><h2 id="基础版DAO设计"><a href="#基础版DAO设计" class="headerlink" title="基础版DAO设计"></a>基础版DAO设计</h2><p>###DAO设计思路</p><p>#####1、建立VO类</p><p>#####2、建立数据连接<br>ThreadLocal类设置局部变量conn确保线程安全</p><p>getConnection()方法和rebuildConnection方法()</p><p>#####3、数据层操作<br>定义DAO操作公共标准，包括增、减、查、分页、统计等操作</p><p>定义特定VO类操作标准</p><p>实现类</p><p>#####4、业务层操作<br>Service操作标准，包括增、减、查、分页、统计等方法</p><p>建立工厂类获取DAO类实例化对象</p><p>实现类</p><p>#####5、测试类<br>代理类处理业务层操作(判断事务控制)</p><p>工厂类获取业务层代理类实例化对象(绑定业务层实例化对象)</p><p>测试操作(客户端调用)</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>#####创建一个数据表<br>    DROP TABLE member PURGE ;<br>    CREATE TABLE member(<br>        mid        VARCHAR2(20),<br>        name        VARCHAR2(20),<br>        age        NUMBER(3),<br>        email    VARCHAR2(50),<br>        sex        VARCHAR2(10),<br>        birthday        DATE,<br>        note        CLOB,<br>        CONSTRAINT pk_mid PRIMARY KEY(mid)<br>    );</p><p>#####实现VO类<br>    package vo;<br>    import java.sql.Date;<br>    public class Member {<br>        private String mid ;<br>        private String name ;<br>        private Integer age ;<br>        private String email ;<br>        private String sex ;<br>        private Date birthday ;<br>        private String node ;<br>        public Member() {}<br>        @Override<br>        public String toString() {<br>            return “Member{“ +<br>                    “mid=’” + mid + ‘\’’ +<br>                    “, name=’” + name + ‘\’’ +<br>                    “, age=” + age +<br>                    “, email=’” + email + ‘\’’ +<br>                    “, sex=’” + sex + ‘\’’ +<br>                    “, birthday=” + birthday +<br>                    “, node=’” + node + ‘\’’ +<br>                    ‘}’;<br>        }<br>        public Member(String mid, String name, Integer age, String email, String sex, Date birthday, String node) {<br>            this.mid = mid;<br>            this.name = name;<br>            this.age = age;<br>            this.email = email;<br>            this.sex = sex;<br>            this.birthday = birthday;<br>            this.node = node;<br>        }<br>        //setter、getter略</p><p>#####创建数据库连接类<br>    package util.dbc;<br>    import java.sql.Connection;<br>    import java.sql.DriverManager;<br>    import java.sql.SQLException;<br>    public class DatabaseConnection {<br>        private static final String DBDRIVER = “oracle.jdbc.driver.OracleDriver” ;<br>        private static final String DBULR = “jdbc:oracle:thin:@localhost:1521:ORCL” ;<br>        private static final String USER = “scott” ;<br>        private static final String PASSWORD = “tiger” ;<br>        private static final ThreadLocal<connection> CONNECTION_THREAD_LOCAL = new ThreadLocal&lt;&gt;() ;</connection></p><pre><code>    /**     * 通过构造方法进行实例化，表示需要获取一个数据库连接     * 数据库的连接通过本类的实例封装，调用此方法连接数据库     */    private DatabaseConnection(){}    public static void rebuildConnection(){        try{            Class.forName(DBDRIVER) ;            //驱动加载            Connection conn = DriverManager.getConnection(DBULR,USER,PASSWORD) ;            CONNECTION_THREAD_LOCAL.set(conn);        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (SQLException e) {            e.printStackTrace();        }    }    /**     * 返回一个JDBC连接对象，如果连接失败返回null     * @return Connection接口实例     */    public static Connection getConnection(){        Connection conn = CONNECTION_THREAD_LOCAL.get() ;        if(conn == null){            //如果conn为空，调用rebuildConnection实现数据库的连接            rebuildConnection();            conn = CONNECTION_THREAD_LOCAL.get() ;        }        return conn ;    }    public static void close() throws Exception {        Connection conn = CONNECTION_THREAD_LOCAL.get() ;        if(conn != null){            try {                conn.close();            }catch(SQLException e){                e.printStackTrace();            }            CONNECTION_THREAD_LOCAL.remove();        }    }}</code></pre><h3 id="DAO操作"><a href="#DAO操作" class="headerlink" title="DAO操作"></a>DAO操作</h3><p>#####定义公共DAO操作标准<br>    package dao;<br>    import java.sql.SQLException;<br>    import java.util.List;<br>    import java.util.Set;</p><pre><code>/** * DAO公共接口 * @param &lt;K&gt; 主键类型 * @param &lt;V&gt; VO类型 */public interface IBaseDAO&lt;K,V&gt; {    /**     * 实现数据增加操作     *     * @param vo 保存要增加的数据的信息类，该类属性确定已经合法     * @return 数据保存成功return true，否则 return false     * @throws SQLException 数据库执行异常     */    public boolean doCreate(V vo) throws SQLException;    /**     * 实现数据修改操作，根据id进行修改     *     * @param vo 保存要修改数据的完整数据     * @return 修改成功返回 true ，否则返回false     * @throws SQLException 数据库执行异常     */    public boolean doEdit(V vo) throws SQLException;    /**     * 数据的删除操作，可以删除指定范围中的数据信息     *     * @param ids 要删除的数据id，不允许重复     * @return 删除成功返回true ，否则返回false     * @throws SQLException 数据库执行异常     */    public boolean doRemove(Set&lt;K&gt; ids) throws SQLException;    /**     * 根据id查询数据     *     * @param id 要查询的数据id     * @return 数据存在返回数据对象，否则返回null     * @throws SQLException 数据库执行异常     */    public V findById(K id) throws SQLException;    /**     * 查询所有数据     *     * @return 返回所有数据对象的集合，如果没有数据则集合长度为0     * @throws SQLException 数据库执行异常    */    public List&lt;V&gt; findAll() throws SQLException;    /**     * 全部分页信息的查询     *     * @param currentPage 当前所在页     * @param lineSize    每页数据行数     * @return 返回该页数据对象的集合，如果没有数据则返回集合长度为0     * @throws SQLException 数据库执行异常     */    public List&lt;V&gt; findSplit(Integer currentPage, Integer lineSize) throws SQLException;    /**     * 根据关键字分页查询     *     * @param currentPage 当前所在页     * @param lineSize    每页显示的数据行数     * @param column      模糊查询的列     * @param keyword     模糊查询的关键字     * @return 如果存在以集合形式返回数据对象，如果数据不存在返回集合长度为0     * @throws SQLException 数据库执行异常     */    public List&lt;V&gt; findSplit(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException;    /**     * 统计全部数据     *     * @return COUNT()函数的返回结果     * @throws SQLException 数据库执行异常     */    public Long getAllCount() throws SQLException;    /**     * 统计搜索数据数量     *     * @param column  模糊查询列     * @param keyword 模糊查询关键字     * @return COUNT()函数返回的结果     * @throws SQLException 数据库执行异常     */    public Long getAllCount(String column, String keyword) throws SQLException;}</code></pre><p>#####定义IMemberDAO操作标准</p><pre><code>package dao;    import vo.Member;    import java.sql.SQLException;import java.util.List;import java.util.Set;    public interface IMemberDAO extends IBaseDAO&lt;String ,Member&gt;{    //继承父接口全部方法    /**     * 根据email查询数据     * @param email 要查询数据的email     * @return 数据存在返回数据对象，否则返回null     * @throws SQLException 数据库执行异常     */    public Member findByEmail(String email)throws SQLException ;        //member表操作}</code></pre><p>#####DAO抽象类进行公共处理</p><pre><code>package util.abs;    import util.dbc.DatabaseConnection;    import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Iterator;import java.util.Set;    public abstract class AbstractDAO {    protected PreparedStatement pstmt ;    protected Connection conn ;    public AbstractDAO(){        this.conn = DatabaseConnection.getConnection();    }    protected Long handleGetAllCount(String tableName) throws SQLException {        String sql = &quot;SELECT COUNT(*) FROM &quot; + tableName ;        this.pstmt = this.conn.prepareStatement(sql) ;        ResultSet rs = this.pstmt.executeQuery() ;        if(rs.next()){            return rs.getLong(1) ;        }        return 0L ;    }    protected Long hangdleGetAllCount(String tableName,String column, String keyword) throws SQLException {        String sql = &quot;SELECT COUNT(*) FROM &quot; + tableName + &quot; WHERE &quot; + column + &quot; LIKE ? &quot; ;        this.pstmt = this.conn.prepareStatement(sql) ;        this.pstmt.setString(1,&quot;%&quot; + keyword + &quot;%&quot;);        ResultSet rs = this.pstmt.executeQuery() ;        if(rs.next()){            return rs.getLong(1) ;        }        return 0L ;    }        protected boolean handleRemoveByString(String tableName, String idColumn, Set&lt;String&gt; ids) throws SQLException{        StringBuffer sql = new StringBuffer(30) ;        sql.append(&quot;DELETE FROM &quot;).append(tableName).append(&quot; WHERE &quot;).append(idColumn).append(&quot; IN (&quot; );        ids.forEach((id)-&gt;{            sql.append(&quot;?,&quot;) ;        });        sql.delete(sql.length()-1,sql.length()).append(&quot;)&quot;) ;        this.pstmt = this.conn.prepareStatement(sql.toString()) ;        Iterator&lt;String&gt; iter = ids.iterator() ;        int foot = 1 ;        while(iter.hasNext()){            this.pstmt.setString(foot++,iter.next());        }        return this.pstmt.executeUpdate() == ids.size() ;    }    protected boolean handleRemoveByLong(String tableName, String idColumn, Set&lt;Long&gt; ids) throws SQLException{        StringBuffer sql = new StringBuffer(30) ;        sql.append(&quot;DELETE FROM &quot;).append(tableName).append(&quot; WHERE &quot;).append(idColumn).append(&quot; IN (&quot; );        ids.forEach((id)-&gt;{            sql.append(&quot;?,&quot;) ;        });        sql.delete(sql.length()-1,sql.length()).append(&quot;)&quot;) ;        this.pstmt = this.conn.prepareStatement(sql.toString()) ;        Iterator&lt;Long&gt; iter = ids.iterator() ;        int foot = 1 ;        while(iter.hasNext()){            this.pstmt.setLong(foot++, iter.next());        }        return this.pstmt.executeUpdate() == ids.size() ;    }}</code></pre><p>#####IMemberDAO实现类</p><pre><code>package dao.impl;    import util.abs.AbstractDAO;import util.dbc.DatabaseConnection;import vo.Member;    import java.sql.Connection;import java.sql.Date;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Set;    public class MemberDAOImpl extends AbstractDAO implements dao.IMemberDAO {    public MemberDAOImpl() {        DatabaseConnection.getConnection();    }        @Override    public boolean doCreate(Member vo) throws SQLException {        String sql = &quot;INSERT INTO member(mid,name,age,email,sex,birthday,note) VALUES (?,?,?,?,?,?,?)&quot; ;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setString(1,vo.getMid());        super.pstmt.setString(2,vo.getName());        super.pstmt.setInt(3,vo.getAge());        super.pstmt.setString(4,vo.getEmail());        super.pstmt.setString(5,vo.getSex());        super.pstmt.setDate(6,vo.getBirthday());        super.pstmt.setString(7,vo.getNode());        return super.pstmt.executeUpdate() &gt; 0;    }    @Override    public boolean doEdit(Member vo) throws SQLException {        String sql = &quot;UPDATE member SET name=?,age=?,email=?,sex=?,birthday=?,note=? WHERE mid=?&quot; ;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setString(1,vo.getName());        super.pstmt.setInt(2,vo.getAge());        super.pstmt.setString(3,vo.getEmail());        super.pstmt.setString(4,vo.getSex());        super.pstmt.setDate(5,vo.getBirthday());        super.pstmt.setString(6,vo.getNode());        super.pstmt.setString(7,vo.getMid());        return super.pstmt.executeUpdate() &gt; 0;    }        @Override    public boolean doRemove(Set&lt;String&gt; ids) throws SQLException {        return super.handleRemoveByString(&quot;member&quot;,&quot;mid&quot;,ids) ;    }    @Override    public Member findById(String id) throws SQLException {        Member vo = null ;        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member WHERE mid=?&quot; ;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setString(1,id);        ResultSet rs = super.pstmt.executeQuery() ;        if(rs.next()){            vo = new Member() ;            vo.setMid(rs.getString(1));            vo.setName(rs.getString(2));            vo.setAge(rs.getInt(3));            vo.setSex(rs.getString(4));            vo.setEmail(rs.getString(5));            vo.setBirthday(rs.getDate(6)) ;            vo.setNode(rs.getString(7)) ;        }        return vo ;    }    @Override    public Member findByEmail(String email) throws SQLException {        Member vo = null ;        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member WHERE email=?&quot; ;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setString(1,email);        ResultSet rs = super.pstmt.executeQuery() ;        if(rs.next()){            vo = new Member() ;            vo.setMid(rs.getString(1));            vo.setName(rs.getString(2));            vo.setAge(rs.getInt(3));            vo.setSex(rs.getString(4));            vo.setEmail(rs.getString(5));            vo.setBirthday(rs.getDate(6)) ;            vo.setNode(rs.getString(7)) ;        }        return vo ;    }    @Override    public List&lt;Member&gt; findAll() throws SQLException {        List&lt;Member&gt; all = new ArrayList() ;        String sql = &quot;SELECT mid,name,age,email,sex,birthday,note FROM member&quot; ;        super.pstmt = super.conn.prepareStatement(sql) ;        ResultSet rs = super.pstmt.executeQuery() ;        while(rs.next()){            Member vo = new Member() ;            vo.setMid(rs.getString(1));            vo.setName(rs.getString(2));            vo.setAge(rs.getInt(3));            vo.setSex(rs.getString(4));            vo.setEmail(rs.getString(5));            vo.setBirthday(rs.getDate(6)) ;            vo.setNode(rs.getString(7)) ;            all.add(vo) ;        }        return all ;    }    @Override    public List&lt;Member&gt; findSplit(Integer currentPage, Integer lineSize) throws SQLException {        List&lt;Member&gt; all = new ArrayList&lt;&gt;() ;        String sql = &quot;SELECT * FROM ( &quot; +                &quot; SELECT mid,name,age,email,sex,birthday,note,ROWNUM rn FROM member &quot; +                &quot; WHERE ROWNUM &lt;= ? )temp WHERE temp.rn &gt; ? &quot;;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setInt(1,currentPage * lineSize);        super.pstmt.setInt(2,(currentPage - 1) * lineSize);        ResultSet rs = super.pstmt.executeQuery();        while(rs.next()){            Member vo = new Member() ;            vo.setMid(rs.getString(1));            vo.setName(rs.getString(2));            vo.setAge(rs.getInt(3));            vo.setSex(rs.getString(4));            vo.setEmail(rs.getString(5));            vo.setBirthday(rs.getDate(6)) ;            vo.setNode(rs.getString(7)) ;            all.add(vo) ;        }        return all ;    }    @Override    public List&lt;Member&gt; findSplit(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException {        List&lt;Member&gt; all = new ArrayList&lt;&gt;() ;        String sql = &quot;SELECT * FROM ( &quot; +                &quot; SELECT mid,name,age,email,sex,birthday,note,ROWNUM rn FROM member &quot; +                &quot; WHERE &quot; + column + &quot; LIKE ? AND ROWNUM &lt;= ? ) temp WHERE temp.rn &gt; ? &quot;;        super.pstmt = super.conn.prepareStatement(sql) ;        super.pstmt.setString(1,&quot;%&quot; + keyword + &quot;%&quot;);        super.pstmt.setInt(2,currentPage * lineSize);        super.pstmt.setInt(3,(currentPage - 1) * lineSize);        ResultSet rs = super.pstmt.executeQuery() ;        while(rs.next()){            Member vo = new Member() ;            vo.setMid(rs.getString(1));            vo.setName(rs.getString(2));            vo.setAge(rs.getInt(3));            vo.setSex(rs.getString(4));            vo.setEmail(rs.getString(5));            vo.setBirthday(rs.getDate(6)) ;            vo.setNode(rs.getString(7)) ;            all.add(vo) ;        }        return all ;    }    @Override    public Long getAllCount() throws SQLException {        return super.handleGetAllCount(&quot;member&quot;) ;    }    @Override    public Long getAllCount(String column, String keyword) throws SQLException {        return super.hangdleGetAllCount(&quot;member&quot;,column,keyword) ;    }}</code></pre><h3 id="工厂类获取实例化对象"><a href="#工厂类获取实例化对象" class="headerlink" title="工厂类获取实例化对象"></a>工厂类获取实例化对象</h3><pre><code>package util.factory;import util.proxy.ServiceProxy;import java.util.ResourceBundle;public class ObjectFactory {    /**    *创建配置文件    *resource.dao(member.dao=dao.imple.IMemberDAOImpl)    **/    private static final ResourceBundle DAO_RESOURCE = ResourceBundle.getBundle(&quot;resource.dao&quot;) ;    public static&lt;T&gt; T getDAOInstance(String key,Class&lt;T&gt;...clazz){        String className = null ;        try{            className = DAO_RESOURCE.getString(key) ;        }catch(Exception e){            if(className == null || &quot;&quot;.equals(className)){                return null ;            }        }        try{            return (T) Class.forName(className).getDeclaredConstructor().newInstance() ;        }catch(Exception e){            return null ;        }    }}</code></pre><h3 id="业务层实现"><a href="#业务层实现" class="headerlink" title="业务层实现"></a>业务层实现</h3><p>#####定义业务层操作标准</p><pre><code>package service;import vo.Member;import java.sql.SQLException;import java.util.List;import java.util.Map;public interface IMemberService {    /**     * 实现数据的增加操作     * 1，检查输入数据是否正确     * 2，调用IMemberDAO.findDyId()方法判断当前增加id是否存在     * 3，调用IMemberDAO.findByEmail()方法判断当前增加的Email是否存在     * 4，没有问题则调用ImemberDAO.doCreate()方法实现数据的增加     * @param vo 要增加的数据对象     * @return 增加成功返回true，否则返回false     */    public boolean add(Member vo) throws SQLException;    /**     * 实现数据的修改操作     * 该操作调用IMemberDAO.doEdit()方法进行全部的数据更新，根据id完成     * @param vo 要更新的数据对象，一定要包含id     * @return 修改成功返回true，否则返回false     */    public boolean edit(Member vo) throws SQLException;    /**     * 数据的删除操作     * 调用IMemberDAO.doRemove()方法     * @param ids 所有要删除的数据的id的集合     * @return 全部删除成功返回true，否则返回false     */    public boolean removeById(String ...ids) throws SQLException;    /**     * 根据id查询数据     * 调用IMemberDAO.findById（)方法     * @param id 要查询的id     * @return 数据存在返回vo对象，否则返回null     */    public Member get(String id) throws SQLException;    /**     * 查询全部数据     * 调用IMemberDAO.findAll()方法     * @return 返回数据对象的集合，如果数据不存在则返回集合长度为0     */    public List&lt;Member&gt; list() throws SQLException;    /**     * 数据的分页查询和数据统计     * 如果column和keyword为空，则进行全部数据查询以及统计     * 如果column和keyword不为空，则进行查询数据的分页显示以及统计     * @param currentPage 当前所在页     * @param lineSize 每页行数     * @param column 查询的列     * @param keyword 关键字     * @return 返回两种数据结果     * key = allResult，value = List 数据的查询结果     * key = allCount， value = Long 统计结果     */    public Map&lt;String,Object&gt; split(Integer currentPage,Integer lineSize,String column,String keyword) throws SQLException;}</code></pre><p>#####业务层实现类</p><pre><code>package service.impl;    import dao.IMemberDAO;import service.IMemberService;import util.dbc.DatabaseConnection;import util.factory.ObjectFactory;import vo.Member;import java.sql.SQLException;import java.util.*;    public class MemberServiceImpl implements IMemberService {    @Override    public boolean add(Member vo) throws SQLException {        //判断数据是否正确        if (vo.getAge() &gt; 150 || vo.getAge() &lt; 0) {            return false;        }        if (!(vo.getSex().equalsIgnoreCase(&quot;F&quot;) || vo.getSex().equalsIgnoreCase(&quot;M&quot;))) {            return false;        }        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;);        if (memberDAO.findById(vo.getMid()) == null) {         //mid和email不可重复            if (memberDAO.findByEmail(vo.getEmail()) == null) {                return memberDAO.doCreate(vo);            }        }        return false;    }    @Override    public boolean edit(Member vo) throws SQLException {        if (vo.getAge() &gt; 150 || vo.getAge() &lt; 0) {            return false;        }        if (!(vo.getSex().equalsIgnoreCase(&quot;F&quot;) || vo.getSex().equalsIgnoreCase(&quot;M&quot;))) {            return false;        }        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);        return memberDAO.doEdit(vo);    }    @Override    public boolean removeById(String... ids) throws SQLException {        if (ids.length == 0) {            return false;        }        Set&lt;String&gt; set = new HashSet&lt;&gt;();        set.addAll(Arrays.asList(ids));        DatabaseConnection.getConnection().setAutoCommit(false);        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;,IMemberDAO.class);        return memberDAO.doRemove(set);    }    @Override    public Member get(String id) throws SQLException {        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;,IMemberDAO.class);        return memberDAO.findById(id);    }    @Override    public List&lt;Member&gt; list() throws SQLException {        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);        return memberDAO.findAll();    }    @Override    public Map&lt;String, Object&gt; split(Integer currentPage, Integer lineSize, String column, String keyword) throws SQLException {        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();        IMemberDAO memberDAO = ObjectFactory.getDAOInstance(&quot;member.dao&quot;, IMemberDAO.class);        if (column == null || &quot;&quot;.equalsIgnoreCase(column) || keyword == null || &quot;&quot;.equalsIgnoreCase(keyword)) {            map.put(&quot;allMembers&quot;, memberDAO.findSplit(currentPage, lineSize));            map.put(&quot;allRecorders&quot;, memberDAO.getAllCount());        } else {            map.put(&quot;allMembers&quot;, memberDAO.findSplit(currentPage, lineSize, column, keyword));            map.put(&quot;allRecorders&quot;, memberDAO.getAllCount(column, keyword));        }        return map;    }}</code></pre><p>###代理类和工厂类获取业务层实例化对象</p><p>#####动态代理<br>    package util.proxy;<br>    import util.dbc.DatabaseConnection;<br>    import java.lang.reflect.InvocationHandler;<br>    import java.lang.reflect.Method;<br>    import java.lang.reflect.Proxy;<br>    import java.util.Iterator;<br>    import java.util.List;<br>    public class ServiceProxy implements InvocationHandler {<br>        private static final List<string> TRANSACTION_METHOD_HEAD = List.of(“add”,”create”,”edit”,”update”,”remove”,”delete”) ;        //需要事务控制的方法名<br>        private Object target ;<br>        public Object bind(Object target){        //绑定真实操作类<br>            this.target = target ;<br>            return Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),this) ;<br>        }<br>        @Override<br>        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>            Object result = null ;<br>            boolean transactionFlag = this.openTransaction(method.getName()) ;<br>            if(transactionFlag){<br>                DatabaseConnection.getConnection().setAutoCommit(false);<br>            }<br>            try{<br>                result = method.invoke(this.target,args) ;<br>                if(transactionFlag){<br>                    DatabaseConnection.getConnection().commit();<br>                }<br>            }catch(Exception e){<br>                if(transactionFlag){<br>                    DatabaseConnection.getConnection().rollback();<br>                }<br>                throw e ;<br>            }finally{<br>                DatabaseConnection.close();<br>            }<br>            return result ;<br>        }</string></p><pre><code>    /**    *判断是否需要事务控制    **/    private boolean openTransaction(String methodName) {        Iterator&lt;String&gt; iter = TRANSACTION_METHOD_HEAD.iterator() ;        while(iter.hasNext()){            if(methodName.startsWith(iter.next())){                return true ;            }        }        return false ;    }}</code></pre><p>#####工厂类获取业务层实例化对象<br>创建配置文件resource.service(member.service=service.imple.IMemberServiceImpl)</p><p>在工厂类中增加如下内容</p><pre><code>private static final ResourceBundle SERVICE_RESOURCE = ResourceBundle.getBundle(&quot;resource.service&quot;) ;public static &lt;T&gt; T getServiceInstance(String key,Class&lt;T&gt;...clazz){       String className = null ;    try{        className = SERVICE_RESOURCE.getString(key) ;    }catch(Exception e){        if(className == null || &quot;&quot;.equals(className)){           return null         }    }    try{        return (T) new ServiceProxy().bind(                Class.forName(className).getDeclaredConstructor().newInstance()) ;    }catch(Exception e){            return null ;    }}</code></pre><p>###测试</p><pre><code>package test;    import junit.framework.TestCase;import org.junit.Test;import service.IMemberService;import util.factory.ObjectFactory;import vo.Member;    import java.sql.Date;import java.sql.SQLException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.List;import java.util.Map;    public class MemberServiceImplTest {    @Test    public void add() throws SQLException {        Member member = new Member() ;        member.setMid(&quot;0000&quot;) ;        member.setName(&quot;sblj&quot;) ;        member.setAge(18) ;        member.setEmail(&quot;sblj@git.cn&quot;) ;        member.setSex(&quot;F&quot;) ;        try {            member.setBirthday(new Date(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2000-01-01&quot;).getTime())) ;        } catch (ParseException e) {            e.printStackTrace();        }        member.setNode(&quot;是个大美女&quot;);        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        TestCase.assertTrue(memberService.add(member));    }    @Test    public void edit() throws SQLException {        Member member = new Member() ;        member.setMid(&quot;0000&quot;) ;        member.setName(&quot;sblj&quot;) ;        member.setAge(18) ;        member.setEmail(&quot;这里不能重复@git.cn&quot;) ;        member.setSex(&quot;F&quot;) ;        try {            member.setBirthday(new Date(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2000-01-01&quot;).getTime())) ;        } catch (ParseException e) {            e.printStackTrace();        }        member.setNode(&quot;还是个大美女&quot;);        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        TestCase.assertTrue(memberService.edit(member));    }    @Test    public void removeById() throws SQLException {        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        TestCase.assertTrue(memberService.removeById(&quot;0000&quot;));    }    //删除后再add()一次，不然没有数据哦    @Test    public void get() throws SQLException {        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        Member member = memberService.get(&quot;0000&quot;) ;        TestCase.assertNotNull(member);    }    @Test    public void list() throws SQLException {        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        List&lt;Member&gt; all = memberService.list() ;        TestCase.assertTrue(all.size()&gt;0);    }    @Test    public void split() throws SQLException {        IMemberService memberService = ObjectFactory.getServiceInstance(&quot;member.service&quot;) ;        Map&lt;String,Object&gt; map = memberService.split(1,1,&quot;&quot;,&quot;&quot;) ;        //Map&lt;String,Object&gt; map = memberService.split(1,1,&quot;mid&quot;,&quot;0&quot;) ;        //两种分别测试一下        TestCase.assertTrue(map.get(&quot;allMembers&quot;) != null &amp;&amp; map.get(&quot;allRecorders&quot;) != null);    }}</code></pre><p>###常见报错</p><p>#####java.lang.NullPointException</p><ul><li><p>常见于dbc，factory，proxy操作中，如果遇到空指向，先检查是否这部分出错；</p><p>  一个奇怪（葩）的问题，如果add、edit、remove方法通过，查询方法报错，检查ServiceProxy类的事务控制逻辑是否有误</p></li><li><p>SQL语句拼接错误</p><p>  此处要小心空格的问题，以及占位符（？）的值的设置<br>#####junit.framework.AssertionFailedError<br>断言错误，TestCase断言错误，此时一般要查询Service实现类中返回的数据<br>#####数据库连接失败<br>检查数据库服务是否开启，url，driver，user，password是否配置错误</p></li></ul><p>###DAO实现思路（debug路线）<br>工厂类(代理对象(ServiceImpl类实例化对象))获取IService类实例化对象→调用操作方法(ServiceImpl下的方法)→实例化IDAO对象(通过工厂类由DAOImpl对象向上转型获得)→调用DAO层方法→调用AbstractDAO类方法获取数据库连接→数据层操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总有大佬让我帮他DAO debug，于是终于有了此篇文章.&lt;/p&gt;
&lt;h2 id=&quot;基础版DAO设计&quot;&gt;&lt;a href=&quot;#基础版DAO设计&quot; class=&quot;headerlink&quot; title=&quot;基础版DAO设计&quot;&gt;&lt;/a&gt;基础版DAO设计&lt;/h2&gt;&lt;p&gt;###DAO设计思
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/20/hello-world/"/>
    <id>http://yoursite.com/2018/11/20/hello-world/</id>
    <published>2018-11-20T13:01:30.996Z</published>
    <updated>2018-11-20T13:01:30.996Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
